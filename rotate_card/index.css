* {
    padding: 0;
    margin: 0;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-image: linear-gradient(200deg, #78f, #f78);
    perspective: 1000px;

}

.card {
    position: relative;
    width: 300px;
    height: 450px;
    border-radius: 30px;
    background-color: #fff;
    cursor: pointer;
    box-shadow: 1px 1px 20px rgba(0, 0, 0, 0.1);
    transform-style: preserve-3d;
    animation: rotate-reverse 1.2s cubic-bezier(.66, -0.47, .33, 1.5) forwards;
}

.card:hover {
    animation: rotate 1.2s cubic-bezier(.66, -0.47, .33, 1.5) forwards;
}

.front,
.back {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-around;
    border-radius: 30px;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    font-size: 1.3em;
    background-color: #fff;
    border-radius: 30px;

}

.back {
    transform: rotateY(180deg);

}

@keyframes rotate {
    0% {
        transform: rotateY(0);
    }

    100% {
        transform: rotateY(180deg);
    }
}

/* @keyframes mymove
{
from {top:0px;}
to {top:200px;}
} */
/* @keyframes animationname {keyframes-selector {css-styles;}} */
/* animationname	必需。定义动画的名称。
keyframes-selector	
必需。动画时长的百分比。

合法的值：

0-100%
from（与 0% 相同）
to（与 100% 相同）
css-styles	必需。一个或多个合法的 CSS 样式属性。 */
/* animation: name duration timing-function delay iteration-count direction; */
/* animation-name	规定需要绑定到选择器的 keyframe 名称。。
animation-duration	规定完成动画所花费的时间，以秒或毫秒计。
animation-timing-function	规定动画的速度曲线。
animation-delay	规定在动画开始之前的延迟。
animation-iteration-count	规定动画应该播放的次数。
animation-direction	规定是否应该轮流反向播放动画。 */
/* animation-timing-function: value; */
/* linear	动画从头到尾的速度是相同的。	测试
ease	默认。动画以低速开始，然后加快，在结束前变慢。	测试
ease-in	动画以低速开始。	测试
ease-out	动画以低速结束。	测试
ease-in-out	动画以低速开始和结束。	测试
cubic-bezier(n,n,n,n)	在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。 */
/* animation-iteration-count: n|infinite; */
/* transition-property: none|all|property; */


@keyframes rotate-reverse {
    0% {
        transform: rotateY(180deg);
    }

    100% {
        transform: rotateY(0);
    }
}